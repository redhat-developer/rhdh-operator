name: Nightly checks

on:
  # workflow_dispatch so that it can be triggered manually if needed
  workflow_dispatch:
  schedule:
    - cron: "34 23 * * *"

jobs:
  nightly-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch:
          - main
          - release-1.6
          - release-1.5
    name: 'Nightly Tests on ${{ matrix.branch }}'
    concurrency:
      group: '${{ github.workflow }}-${{ matrix.branch }}'
      cancel-in-progress: true
    env:
      CONTAINER_TOOL: podman
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5 # default branch will be checked out by default on scheduled workflows
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: 'go.mod'

      - name: Set env vars
        run: |
          branch=${{ matrix.branch }}
          distLocation="dist/rhdh/install.yaml"
          OPERATOR_MANIFEST="${{ github.workspace }}/${distLocation}"
          proto="file://"
          if [[ "${branch}" != "main" ]]; then
            version="${branch#release-}"
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            OPERATOR_MANIFEST="${{ github.workspace }}/tests/e2e/testdata/rhdh-operator-${version}.yaml"
            # TODO(rm3l): remove this once 1.6 is the minimal supported version
            if [[ $major -ge 1 && $minor -ge 6 ]]; then
              OPERATOR_MANIFEST="https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/${branch}/${distLocation}"
              proto=""
            fi
          fi
          echo "OPERATOR_MANIFEST=${OPERATOR_MANIFEST}" >> $GITHUB_ENV
          OPERATOR_IMAGE=$(curl -s "${proto}${OPERATOR_MANIFEST}" | yq 'select(.kind == "Deployment" and .metadata.labels.app == "rhdh-operator") | .spec.template.spec.containers[0].image')
          echo "OPERATOR_IMAGE=${OPERATOR_IMAGE}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Check if operator image exists in remote registry
        id: operator-image-existence-checker
        run: |
          echo "OPERATOR_IMAGE_EXISTS=$(skopeo inspect "docker://${{ env.OPERATOR_IMAGE }}" > /dev/null && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Display warning if image was not found
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'false' }}
        run: |
          echo "::warning ::Operator Image ${{ env.OPERATOR_IMAGE }} not found for testing the ${{ matrix.branch }} branch. It might have expired. E2E tests will be skipped for ${{ matrix.branch }}."

      - name: Write SeaLights token into file
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: echo "${SEALIGHTS_AGENT_TOKEN}" > sltoken.txt
        env:
          SEALIGHTS_AGENT_TOKEN: '${{secrets.SEALIGHTS_AGENT_TOKEN}}' ## Make sure to add token to repo secrets

      - name: Download SeaLights Go agent and CLI tool
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
            echo "[SeaLights] Downloading SeaLights Golang & CLI Agents..."
            # Architectures available: darwin-amd64, darwin-arm64, linux-amd64, linux-arm64
            SL_OS_ARCH=linux-amd64
            SL_GO_AGENT_VERSION=v1.1.193
            SL_CLI_AGENT_VERSION=v1.0.49

            wget -nv -O sealights-go-agent.tar.gz https://agents.sealights.co/slgoagent/${SL_GO_AGENT_VERSION}/slgoagent-${SL_OS_ARCH}.tar.gz
            wget -nv -O sealights-slcli.tar.gz https://agents.sealights.co/slcli/${SL_CLI_AGENT_VERSION}/slcli-${SL_OS_ARCH}.tar.gz

            tar -xzf ./sealights-go-agent.tar.gz && tar -xzf ./sealights-slcli.tar.gz 
            rm -f ./sealights-go-agent.tar.gz ./sealights-slcli.tar.gz 
            ./slgoagent -v 2> /dev/null | grep version && ./slcli -v 2> /dev/null | grep version

      - name: Initiating the SeaLights agent
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          echo "[SeaLights] Initiating the SeaLights agent to Golang and handing it the token"
          ./slcli config init --lang go --token ./sltoken.txt

      - name: Configuring SeaLights
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          echo "[SeaLights] Configuring SeaLights to scan for main branch nightly"
          ./slcli config create-bsid --app rhdh-operator --branch ${{ matrix.branch }} --build "$BUILD_TIME:$LATEST_COMMIT_SHA"
        env:
          LATEST_COMMIT_SHA: ${{ github.sha }}

      - name: Run SeaLights scan for tests
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          echo "[SeaLights] Running the SeaLights scan"
          ./slcli scan --bsid buildSessionId.txt  --path-to-scanner ./slgoagent  --workspacepath "./" --scm git --scmBaseUrl https://github.com/redhat-developer/rhdh-operator --scmProvider github

      # gosec needs a "build" stage so connect it to the lint step which we always do
      - name: Build
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: make lint

      - name: Create a Unit Tests session
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: ./slcli test start-stage --bsid=buildSessionId.txt --testStage "Unit Tests"

      - name: Test
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        # run this stage only if there are changes that match the includes and not the excludes
        run: make test

      - name: Create a Integration Tests session
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          ./slcli test end-stage --bsid=buildSessionId.txt --executionId "Unit Tests"
          ./slcli test start-stage --bsid=buildSessionId.txt --testStage "Integration Tests"

      - name: Create Kind cluster (integration tests)
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: integration-test-cluster
          ignore_failed_clean: true

      - name: Run Controller
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        # run this stage only if there are changes that match the includes and not the excludes
        run: |
          # Need to 'make install' first, so that the necessary tool binaries (like controller-gen) can be downloaded locally.
          # Otherwise, we might end up with a race condition where the tool binary is not yet downloaded,
          # but the `make test` command tries to use it.
          make manifests generate fmt vet install
          make run &
          MAKE_RUN_BG_PID=$!
          echo "MAKE_RUN_BG_PID=${MAKE_RUN_BG_PID}" | tee -a $GITHUB_ENV

      - name: Generic Integration test
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        # run this stage only if there are changes that match the includes and not the excludes
        # perform it on backstage.io for speed
        run: |
          make integration-test PROFILE=backstage.io USE_EXISTING_CLUSTER=true USE_EXISTING_CONTROLLER=true
          kill "${{ env.MAKE_RUN_BG_PID }}" || true
          make uninstall || true

      - name: Delete integration test cluster
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          kind delete cluster --name integration-test-cluster || true

      - name: Create a E2E Tests session
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          ./slcli test end-stage --bsid=buildSessionId.txt --executionId "Integration Tests"
          ./slcli test start-stage --bsid=buildSessionId.txt --testStage "E2E Tests"

      - name: Generate Kind Config
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          cat <<EOF > /tmp/kind-config.yaml
          apiVersion: kind.x-k8s.io/v1alpha4
          kind: Cluster
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: TCP
                - containerPort: 443
                  hostPort: 443
                  protocol: TCP
          EOF

      - name: Create Kind cluster (E2E)
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: e2e-test-cluster
          config: /tmp/kind-config.yaml
          ignore_failed_clean: true

      - name: Install Ingress Controller
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        run: |
          kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s

      - name: Run E2E tests
        if: ${{ steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true' }}
        env:
          BACKSTAGE_OPERATOR_TESTS_PLATFORM: kind
          BACKSTAGE_OPERATOR_TESTS_K8S_CREATE_INGRESS: 'true'
          BACKSTAGE_OPERATOR_TESTS_K8S_INGRESS_DOMAIN: '127.0.0.1.sslip.io'
          BACKSTAGE_OPERATOR_TESTS_APP_REACHABILITY_TIMEOUT: ${{ vars.BACKSTAGE_OPERATOR_TESTS_APP_REACHABILITY_TIMEOUT }}
          OPERATOR_MANIFEST: ${{ env.OPERATOR_MANIFEST }}
          IMG: ${{ env.OPERATOR_IMAGE }}
        run: make test-e2e

      - name: Remove SeaLights secrets
        if: always() && steps.operator-image-existence-checker.outputs.OPERATOR_IMAGE_EXISTS == 'true'
        run: |
          echo "[SeaLights] Cleaning up after SeaLights run"
          rm -f sltoken.txt