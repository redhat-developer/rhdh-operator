name: PR Test operator

on:
  pull_request:
    branches: 
    - main
    - rhdh-1.[0-9]+
    - 1.[0-9]+.x
    - release-1.[0-9]+

jobs:
  pr-validate:
    name: PR Validate
    runs-on: ubuntu-latest
    steps:
      - name: Determine workflow run event context
        run: echo "on-event=${{ github.event_name }}" >> $GITHUB_ENV

      - name: Handle invalid context for pull requests
        if: ${{ env.on-event == 'pull_request' && (!github.event.pull_request.head.sha || !github.event.pull_request.number) }}
        run: |
          echo "Invalid context for this workflow run. Exiting."
          exit 1
          
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      # check changes in this commit for regex include and exclude matches
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        with:
          files: |
            .github/workflows/pr.yaml
            Makefile
            **/*.go
            bundle/**
            config/**
            go.mod
            go.sum
          files_ignore: |
            **/*.md
            **/*.adoc
            .rhdh/** 

      - name: List all changed files (for troubleshooting)
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version-file: 'go.mod'

      - name: Store build timestamp
        run: echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      # gosec needs a "build" stage so connect it to the lint step which we always do
      - name: build
        run: make lint

      - name: Start Minikube
        # run this stage only if there are changes that match the includes and not the excludes
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: medyagh/setup-minikube@cea33675329b799adccc9526aa5daccc26cd5052 # v0.0.19

      - name: Run Controller
        # run this stage only if there are changes that match the includes and not the excludes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Need to 'make install' first, so that the necessary tool binaries (like controller-gen) can be downloaded locally.
          # Otherwise, we might end up with a race condition where the tool binary is not yet downloaded,
          # but the `make test` command tries to use it.
          make manifests generate fmt vet install
          make run &

      - name: Download SeaLights Go agent and CLI tool
        run: |
          echo "[Sealights] Downloading Sealights Golang & CLI Agents..."
          case $(lscpu | awk '/Architecture:/{print $2}') in
            x86_64) SL_ARCH="linux-amd64";;
            arm) SL_ARCH="linux-arm64";;
          esac
          wget -nv -O sealights-go-agent.tar.gz https://agents.sealights.co/slgoagent/latest/slgoagent-$SL_ARCH.tar.gz
          wget -nv -O sealights-slcli.tar.gz https://agents.sealights.co/slcli/latest/slcli-$SL_ARCH.tar.gz
          tar -xzf ./sealights-go-agent.tar.gz && tar -xzf ./sealights-slcli.tar.gz
          rm -f ./sealights-go-agent.tar.gz ./sealights-slcli.tar.gz
          ./slgoagent -v 2> /dev/null | grep version && ./slcli -v 2> /dev/null | grep version
      
      - name: Write SeaLights token into file
        run: echo "${SEALIGHTS_AGENT_TOKEN}" > sltoken.txt
        env:
          SEALIGHTS_AGENT_TOKEN: '${{secrets.SEALIGHTS_AGENT_TOKEN}}' ## Make sure to add token to repo secrets

      - name: Initiating the SeaLights agent
        run: |
          echo "[Sealights] Initiating the SeaLights agent to Golang and handing it the token"
          ./slcli config init --lang go --token ./sltoken.txt

      - name: Configuring SeaLights - on pull_request event
        if: env.on-event == 'pull_request'
        run: |
          echo "[Sealights] Configuring SeaLights to scan the pull request branch"
          echo "Latest commit sha: ${LATEST_COMMIT_SHA}"
          echo "PR Number: ${PULL_REQUEST_NUMBER}"
          ./slcli config create-pr-bsid --app rhdh-operator --target-branch "main" --pull-request-number ${PULL_REQUEST_NUMBER} --latest-commit ${LATEST_COMMIT_SHA} --repository-url https://github.com/redhat-developer/rhdh-operator.git
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          LATEST_COMMIT_SHA: ${{github.event.pull_request.head.sha}}

      - name: Configuring SeaLights - on push event
        if: env.on-event == 'push'
        run: |
          echo "[Sealights] Configuring SeaLights to scan the main branch after pull request was closed"
          ./slcli config create-bsid --app rhdh-operator --branch "main" --build "$BUILD_TIME :$LATEST_COMMIT_SHA"
        env:
          LATEST_COMMIT_SHA: ${{ github.sha }}

      - name: Run the SeaLights scan for integration_tests
        run: |
          echo "[Sealights] Running the SeaLights integration tests scan"
          ./slcli scan --bsid buildSessionId.txt  --path-to-scanner ./slgoagent --workspacepath "./" --scm git --scmBaseUrl https://github.com/redhat-developer/rhdh-operator --scmProvider github
        env:
          SEALIGHTS_TEST_STAGE: "ALL Tests"
          SEALIGHTS_TEST_SELECTION: false

      - name: Test
        # run this stage only if there are changes that match the includes and not the excludes
        #if: steps.changed-files.outputs.any_changed == 'true' ## enable after initial scan results captured
        run: make test

      - name: Generic Integration test
        # run this stage only if there are changes that match the includes and not the excludes
        # perform it on backstage.io for speed
        #if: steps.changed-files.outputs.any_changed == 'true' ## enable after initial scan results captured
        run: make integration-test PROFILE=backstage.io USE_EXISTING_CLUSTER=true USE_EXISTING_CONTROLLER=true

      - name: RHDH specific Integration test
        # run this stage only if there are changes that match the includes and not the excludes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make integration-test ARGS='--focus "create default rhdh"' USE_EXISTING_CLUSTER=true USE_EXISTING_CONTROLLER=true

      - name: clean all SeaLights secret stuff
        run: |
          echo "[Sealights] Cleaning up after SeaLights run"
          rm sltoken.txt
          
      - name: Run Gosec Security Scanner
        run: make gosec

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: gosec.sarif