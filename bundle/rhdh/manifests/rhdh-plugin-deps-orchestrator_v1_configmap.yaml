apiVersion: v1
data:
  sample-greetings.yaml: |+
    apiVersion: v1
    data:
      greeting.sw.input-schema.json: |
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "type": "object",
          "properties": {
            "language": {
              "title": "Language",
              "description": "Language to greet",
              "type": "string",
              "enum": ["English", "Spanish"],
              "default": "English"
            }
          }
        }
      workflow-output-schema.json: |-
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "WorkflowResult",
          "description": "Schema of workflow output",
          "type": "object",
          "properties": {
            "result": {
              "$ref": "../shared/schemas/workflow-result-schema.json",
              "type": "object"
            }
          }
        }
    kind: ConfigMap
    metadata:
      name: 01-greeting-resources-schemas
    ---
    apiVersion: sonataflow.org/v1alpha08
    kind: SonataFlow
    metadata:
      annotations:
        sonataflow.org/description: YAML based greeting workflow
        sonataflow.org/expressionLang: jq
        sonataflow.org/profile: gitops
        sonataflow.org/version: "1.0"
      labels:
        app: greeting
        sonataflow.org/workflow-app: greeting
      name: greeting
    spec:
      flow:
        annotations:
          - workflow-type/infrastructure
        dataInputSchema:
          failOnValidationErrors: true
          schema: schemas/greeting.sw.input-schema.json
        functions:
          - name: greetFunction
            operation: sysout
            type: custom
          - name: successResult
            operation: '{ "result": { "message": "Greeting workflow completed successfully", "outputs":[ { "key":"Selected language", "value": .language }, { "key":"Greeting message", "value": .greeting } ] } }'
            type: expression
        start:
          stateName: ChooseOnLanguage
        states:
          - dataConditions:
              - condition: .language  == "English"
                transition:
                  nextState: GreetInEnglish
              - condition: .language  == "Spanish"
                transition:
                  nextState: GreetInSpanish
            defaultCondition:
              transition:
                nextState: GreetInEnglish
            name: ChooseOnLanguage
            type: switch
          - data:
              greeting: Hello from YAML Workflow
            name: GreetInEnglish
            transition:
              nextState: GreetPerson
            type: inject
          - data:
              greeting: Saludos desde YAML Workflow
            name: GreetInSpanish
            transition:
              nextState: GreetPerson
            type: inject
          - actionMode: sequential
            actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: .greeting
                  invoke: sync
                  refName: greetFunction
                name: greetAction
              - actionDataFilter:
                  useResults: true
                functionRef:
                  invoke: sync
                  refName: successResult
                name: setOutput
            end:
              terminate: true
            name: GreetPerson
            type: operation
      podTemplate:
        container:
          resources: {}
          image: quay.io/orchestrator/serverless-workflow-greeting:96d772297d3ee964ab9775d7aae7dbbd4f070dd7
      resources:
        configMaps:
          - configMap:
              name: 01-greeting-resources-schemas
            workflowPath: schemas
      persistence:
        postgresql:
          secretRef:
            name: backstage-psql-secret-{{backstage-name}}
            userKey: POSTGRES_USER #hardcoded
            passwordKey: POSTGRES_PASSWORD #hardcoded
          serviceRef:
            name: backstage-psql-{{backstage-name}} # hardcoded backstage-psql-{{cr-name}}
            namespace: {{backstage-ns}} # hardcoded {{cr-namespace}}
            databaseName: backstage_plugin_orchestrator #hardcoded
            port: 5432
            databaseSchema: greeting
    status:
      address: {}

  sonataflow.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-knative-to-sonataflow-and-workflows # hardcoded
    spec:
      podSelector: {}
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  # Allow knative events to be delivered to workflows.
                  kubernetes.io/metadata.name: knative-eventing
            - namespaceSelector:
                matchLabels:
                  # Allow auxiliary knative function for workflow (such as m2k-save-transformation)
                  kubernetes.io/metadata.name: knative-serving
    ---
    # NetworkPolicy to unblock incoming traffic to the namespace
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-external-communication # hardcoded
    spec:
      podSelector: {}
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  # Allow knative events to be delivered to workflows.
                  kubernetes.io/metadata.name: openshift-ingress
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-intra-network # hardcoded
    spec:
      # Apply this policy to all pods in the namespace
      podSelector: {}
      # Specify policy type as 'Ingress' to control incoming traffic rules
      policyTypes:
        - Ingress
      ingress:
        - from:
            # Allow ingress from any pod within the same namespace
            - podSelector: {}
    ---
    # NetworkPolicy to allow openshift-user-workload-monitoring pods to access all pods within the workflow's namespace
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-monitoring-to-sonataflow-and-workflows # hardcoded
    spec:
      # Apply this policy to all pods in the namespace
      podSelector: {}
      # Specify policy type as 'Ingress' to control incoming traffic rules
      policyTypes:
        - Ingress
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  # Allow openshift-user-workload-monitoring pods to access the workflow.
                  kubernetes.io/metadata.name: openshift-user-workload-monitoring
    ---
    apiVersion: operator.knative.dev/v1beta1
    kind: KnativeEventing
    metadata:
      name: knative-eventing
      namespace: knative-eventing
    spec:
      Registry: {}
    ---
    apiVersion: operator.knative.dev/v1beta1
    kind: KnativeServing
    metadata:
      name: knative-serving
      namespace: knative-serving
    spec:
      controller-custom-certs:
        name: ""
        type: ""
      registry: {}
    ---
    apiVersion: sonataflow.org/v1alpha08
    kind: SonataFlowPlatform
    metadata:
      name: sonataflow-platform
    spec:
      monitoring:
        enabled: true
      build:
        template:
          resources:
            requests:
              memory: 64Mi
              cpu: 250m
            limits:
              memory: 1Gi
              cpu: 500m
      services:
        dataIndex:
          enabled: true
          persistence:
            postgresql:
              secretRef:
                name: backstage-psql-secret-{{backstage-name}}
                userKey: POSTGRES_USER
                passwordKey: POSTGRES_PASSWORD
              serviceRef:
                name: backstage-psql-{{backstage-name}}
                namespace: {{backstage-ns}}
                databaseName: backstage_plugin_orchestrator
        jobService:
          enabled: true
          persistence:
            postgresql:
              secretRef:
                name: backstage-psql-secret-{{backstage-name}}
                userKey: POSTGRES_USER
                passwordKey: POSTGRES_PASSWORD
              serviceRef:
                name: backstage-psql-{{backstage-name}}
                namespace: {{backstage-ns}}
                databaseName: backstage_plugin_orchestrator
kind: ConfigMap
metadata:
  name: rhdh-plugin-deps-orchestrator
